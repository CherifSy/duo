#!/usr/bin/env node

/**
 * Module dependencies.
 */

var write = require('fs').createWriteStream;
var Command = require('commander').Command;
var exists = require('fs').existsSync;
var resolve = require('path').resolve;
var dirname = require('path').dirname;
var mkdirp = require('mkdirp').sync;
var Logger = require('stream-log');
var stat = require('fs').statSync;
var stdin = require('get-stdin');
var join = require('path').join;
var spawn = require('win-fork');
var pkg = require('../package');
var cwd = process.cwd();
var Duo = require('..');

/**
 * Logger
 */

var logger = new Logger(process.stderr)
  .type('building', '36m')
  .type('built', '36m')
  .type('installing', '36m')
  .type('installed', '36m')
  .type('finding', '36m')
  .type('found', '36m');

/**
 * Error
 */

logger.type('error', '31m', function(){
  logger.end();
  process.exit(1);
});

/**
 * Program
 */

var program = new Command('duo')
  .version(pkg.version)
  .usage('<command> [options]')
  .option('-c, --concurrency <n>', 'set concurrency, defaulted to 50', 50)
  .option('-d, --development', 'include development dependencies.', false)
  .option('-g, --global <name>', 'expose entry as a global <name>', null)
  .option('-o, --output <dir>', 'set the output directory, defaulted to build/', null)
  .option('-q, --quiet', 'only print to stderr when there is an error', false)
  .option('-r, --root <dir>', 'root directory to build from.', null)
  .option('-t, --type <type>', 'set the entry type', null)
  .option('-u, --use <plugin>', 'use transform plugin', null)
  .option('-v, --verbose', 'show as much logs as possible', false)
  .parse(process.argv);

/**
 * Help
 */

program.on('--help', function(){
  console.log('  Usage:');
  console.log();
  console.log('  # build in.js and output out.js');
  console.log('  $ duo in.js > out.js');
  console.log('  $ duo in.js out.js');
  console.log();
  console.log('  # build in.css and output out.css');
  console.log('  $ duo in.css > out.css');
  console.log('  $ duo in.css out.css');
  console.log();
  console.log('  # build from stdin and output out.css');
  console.log('  $ duo < in.css > out.css');
  console.log();
  console.log('  Commands:');
  console.log();
  console.log('    ls           list all dependencies.');
  console.log('    duplicates   show all duplicates.');
  console.log();
  process.exit(0);
});

/**
 * Arguments
 */

var args = process.argv.slice(3);

/**
 * Command
 */

var command = program.args[0];

/**
 * PATH
 */

var paths = [__dirname].concat(process.env.PATH.split(':'));

/**
 * Bin
 */

var bin = ['duo', command].join('-');

/**
 * Quiet flag.
 */

var quiet = program.quiet;

/**
 * Custom executable
 */

if (command && !~command.indexOf('.')) {
  // find executable
  var exec = paths.reduce(function(binary, path){
    path = resolve(path, bin);
    return exists(path) && stat(path)
      ? path
      : binary;
  }, bin);

  // does not exist
  if (!exists(exec)) {
    logger.error(bin + '(1) does not exist');
    return;
  }

  // spawn
  args.unshift(exec);

  // proxy subcommands through gnode(1)
  var gnode = require.resolve('gnode');
  var bin = join(dirname(gnode), 'bin', 'gnode');
  args.unshift(bin);

  var proc = spawn('node', args, { stdio: 'inherit', customFds: [0, 1, 2] });
  proc.on('close', process.exit.bind(process));

  return;
}

/**
 * Build a single file
 *
 * TODO: Come up with a better way of
 * switching between the various inputs.
 * This is so ugly.
 */

if (command) {
  var root = base(program.root);
  var out = process.stdout;
  var duo = create(root).entry(command);

  if (program.args[1]) {
    var file = join(root, program.args[1]);
    mkdirp(dirname(file));
    out = write(file);
  }

  !quiet && logger.building('building %s', command);
  duo.run(function(err, str) {
    if (err) throw error(err);
    out.write(str);
    !quiet && logger.end();
  });

} else if (!process.stdin.isTTY) {
  stdin(function(src) {
    var out = process.stdout;
    var root = findroot(cwd);
    var duo = create(root).src(src, program.type);

    if (program.args[1]) {
      var file = join(root, program.args[1]);
      mkdirp(dirname(file));
      out = write(file);
    }

    !quiet && logger.building('from stdin');
    duo.run(function(err, str) {
      if (err) throw error(err);
      !quiet && logger.built('from stdin');
      out.write(str);
      !quiet && logger.end();
    });
  });
} else {
  program.help();
}

/**
 * Create a duo instance
 *
 * @param {String} root
 * @param {entry} entry
 */

function create(root, entry) {
  var duo = Duo(root)
    .development(!! program.development)
    .concurrency(program.concurrency)
    .entry(entry);

  // global
  program.global && duo.global(program.global);

  // verbose
  if (program.verbose) {
    duo.on('resolving', log('finding'));
    duo.on('resolve', log('found'));
    duo.on('installing', log('installing'));
  }

  // output dir
  program.out && duo.assets(program.out);

  if (program.use) {
    program.use.trim().split(",").forEach(function (plugin) {
      var mod = resolve(root, "node_modules", plugin.trim());
      duo.use(require(mod)());
    });
  }

  // installed
  !quiet && duo.on('install', log('installed'));

  return duo;
}

/**
 * Log an event
 *
 * @param {String} event
 * @return {Function}
 */

function log (event) {
  return function(pkg) {
    logger[event](pkg.slug());
  }
}

/**
 * Error
 */

function error(err) {
  logger.error(err.stack);
  logger.end();
}

/**
 * Object values
 *
 * @param {Object} obj
 * @return {Array}
 */

function values(obj) {
  return Object.keys(obj).map(function(k) { return obj[k]; });
}

/**
 * Read JSON
 *
 * @param {String} path
 * @return {Object}
 * @api private
 */

function json(path) {
  try {
    return require(path);
  } catch(e) {
    return {};
  }
};

/**
 * Find the root
 *
 * @param {String} root
 * @param {String}
 */

function findroot(root) {
  while (!exists(join(root, 'component.json')) && '/' != root) {
    root = dirname(root);
  }

  if ('/' == root) {
    logger.error('no manifest found');
    process.exit(1);
  }

  return root;
}

/**
 * Resolve the root
 *
 * @param {String} path
 * @return {String}
 */

function base(path) {
  return path
    ? resolve(cwd, path)
    : cwd;
}
