#!/usr/bin/env node

/**
 * Module dependencies.
 */

var write = require('fs').createWriteStream;
var Command = require('commander').Command;
var resolve = require('path').resolve;
var exists = require('fs').existsSync;
var mkdirp = require('mkdirp').sync;
var Logger = require('stream-log');
var stat = require('fs').statSync;
var spawn = require('win-fork');
var pkg = require('../package');
var path = require('path');
var fs = require('co-fs');
var Duo = require('..');
var co = require('co');

/**
 * Logger
 */

var logger = new Logger(process.stderr)
  .type('installing', '36m')
  .type('installed', '36m')
  .type('finding', '36m')
  .type('found', '36m');

/**
 * Error
 */

logger.type('error', '31m', function(){
  logger.end();
  process.exit(1);
});

/**
 * Program
 */

var program = new Command('duo')
  .version(pkg.version)
  .usage('<command> [options]')
  .option('-d, --development', 'include development dependencies.', false)
  .parse(process.argv);

/**
 * Help
 */

program.on('--help', function(){
  console.log('  Usage:');
  console.log();
  console.log('  # build in.js and output out.js');
  console.log('  $ duo in.js > out.js');
  console.log('  $ duo in.js out.js');
  console.log();
  console.log('  # build in.css and output out.css');
  console.log('  $ duo in.css > out.css');
  console.log('  $ duo in.css out.css');
  console.log();
  console.log('  Commands:');
  console.log();
  console.log('    ls           list all dependencies.');
  console.log('    duplicates   show all duplicates.');
  console.log();
  process.exit(0);
});

/**
 * Arguments
 */

var args = process.argv.slice(3);

/**
 * Command
 */

var command = program.args[0];

/**
 * Help.
 */

if (!command) program.help();

/**
 * Build
 */

if (~command.indexOf('.')) {
  var root = process.cwd();
  var duo = Duo(root);
  var out = process.stdout;
  duo.entry(command);
  duo.run = co(duo.run);
  duo.development(program.development);

  // out
  if (program.args[1]) {
    var file = path.join(root, program.args[1]);
    mkdirp(path.dirname(file));
    out = write(file);
  }

  // events
  duo.on('resolving', log('finding'));
  duo.on('resolve', log('found'));
  duo.on('fetching', log('installing'));
  duo.on('fetch', log('installed'));

  return duo.run(function(err, str){
    if (err) logger.error(err);
    logger.end();
    out.write(str, function(){
      process.exit(0);
    });
  });
}

/**
 * PATH
 */

var paths = [__dirname].concat(process.env.PATH.split(':'));

/**
 * Bin
 */

var bin = ['duo', command].join('-');

/**
 * Find executable.
 */

var exec = paths.reduce(function(binary, path){
  path = resolve(path, bin);
  return exists(path) && stat(path)
    ? path
    : binary;
}, bin);

/**
 * Log an event
 *
 * @param {String} event
 * @return {Function}
 */

function log (event) {
  return function(pkg) {
    logger[event](pkg.slug());
  }
}

/**
 * Does not exists
 *
 * @param {String} exec
 */

if (!exists(exec)) {
  logger.error(bin + '(1) does not exist');
  return;
}

/**
 * Spawn
 */

args.unshift(exec);
args.unshift('--harmony-generators');
var proc = spawn('node', args, { stdio: 'inherit', customFds: [0, 1, 2] });
proc.on('close', process.exit.bind(process));
