#!/usr/bin/env node

/**
 * Module dependencies.
 */

var Command = require('commander').Command;
var exists = require('fs').existsSync;
var resolve = require('path').resolve;
var dirname = require('path').dirname;
var mkdirp = require('mkdirp').sync;
var Logger = require('stream-log');
var stat = require('fs').statSync;
var stdin = require('get-stdin');
var join = require('path').join;
var spawn = require('win-fork');
var pkg = require('../package');
var Batch = require('batch');
var stdout = process.stdout;
var cwd = process.cwd();
var Duo = require('..');

/**
 * Logger
 */

var logger = new Logger(process.stderr)
  .type('building', '36m')
  .type('built', '36m')
  .type('installing', '36m')
  .type('installed', '36m')
  .type('finding', '36m')
  .type('found', '36m');

/**
 * Error
 */

logger.type('error', '31m', function(){
  logger.end();
  process.exit(1);
});

/**
 * Program
 */

var program = new Command('duo')
  .version(pkg.version)
  .usage('<command> [options]')
  .option('-c, --concurrency <n>', 'set concurrency, defaulted to 50', 50)
  .option('-d, --development', 'include development dependencies.', false)
  .option('-g, --global <name>', 'expose entry as a global <name>', null)
  .option('-o, --output <dir>', 'set the output directory, defaulted to build/', null)
  .option('-q, --quiet', 'only print to stderr when there is an error', false)
  .option('-r, --root <dir>', 'root directory to build from.', null)
  .option('-t, --type <type>', 'set the entry type', null)
  .option('-u, --use <plugin>', 'use transform plugin', null)
  .option('-v, --verbose', 'show as much logs as possible', false)
  .parse(process.argv);

/**
 * Help
 */

program.on('--help', function(){
  console.log('  Usage:');
  console.log();
  console.log('  # build in.js and output out.js');
  console.log('  $ duo in.js > out.js');
  console.log('  $ duo in.js out.js');
  console.log();
  console.log('  # build in.css and output out.css');
  console.log('  $ duo in.css > out.css');
  console.log('  $ duo in.css out.css');
  console.log();
  console.log('  # build from stdin and output out.css');
  console.log('  $ duo < in.css > out.css');
  console.log();
  console.log('  Commands:');
  console.log();
  console.log('    ls           list all dependencies.');
  console.log('    duplicates   show all duplicates.');
  console.log();
  process.exit(0);
});

/**
 * Command
 */

var command = program.args[0];

/**
 * $PATH
 */

var paths = [__dirname].concat(process.env.PATH.split(':'));

/**
 * Bin
 */

var bin = ['duo', command].join('-');

/**
 * Quiet flag.
 */

var quiet = program.quiet;

/**
 * Custom executable
 */

if (command && !isFile(command)) {
  var args = process.argv.slice(3);

  // find executable
  var exec = paths.reduce(function(binary, path){
    path = resolve(path, bin);
    return exists(path) && stat(path)
      ? path
      : binary;
  }, bin);

  // does not exist
  if (!exists(exec)) {
    logger.error(bin + '(1) does not exist');
    return;
  }

  // spawn
  args.unshift(exec);

  // proxy subcommands through gnode(1)
  var gnode = require.resolve('gnode');
  var bin = join(dirname(gnode), 'bin', 'gnode');
  args.unshift(bin);

  var proc = spawn('node', args, { stdio: 'inherit', customFds: [0, 1, 2] });
  proc.on('close', process.exit.bind(process));

  return;
}

/**
 * Actions
 */

if (command) return build(program.args);
if (!process.stdin.isTTY) return input();

// invalid
program.help();

/**
 * Accept standard input
 */

function input() {
  stdin(function(src) {
    var root = findroot(program.root);
    var duo = create(root).src(src, program.type);

    duo.run(function(err, str) {
      if (err) throw error(err);
      logger.end();
      stdout.write(str);
      process.exit(0);
    });
  });
}

/**
 * Build file(s)
 *
 * @param {Array} entries
 * @api private
 */

function build(entries) {
  var batch = new Batch;
  var len = entries.length;
  var last = entries[len - 1];
  var push = batch.push.bind(batch);
  var out = !isFile(last) ? entries.pop() : false;

  // no entries to build
  !len && program.help();

  // write to standard out
  if (1 == len) {
    var duo = create(entries[0]);
    duo.run(function(err, src) {
      if (err) return error(err);
      logger.end();
      stdout.write(src);
      process.exit(0);
    });
  }

  // write multiple files to
  // `out` or `duo.assets()`
  if (len > 1) {
    var duos = entries
      .map(multiple)
      .map(push);

    batch.end(function(err) {
      if (err) return error(err);
      logger.end();
      process.exit(0);
    });
  }

  // write multiple entries to
  // the directory `out`
  function multiple(entry) {
    return function(done) {
      var duo = create(entry);
      out && duo.assets(out);
      duo.write(done);
    }
  }
}

/**
 * Create a duo instance
 *
 * @param {entry} entry
 * @return {Duo}
 * @api private
 */

function create(entry) {
  var root = findroot(program.root);
  var duo = Duo(root)
    .development(!! program.development)
    .concurrency(program.concurrency)
    .entry(resolve(entry));

  // global
  program.global && duo.global(program.global);

  // verbose
  if (program.verbose) {
    duo.on('resolving', log('finding'));
    duo.on('resolve', log('found'));
    duo.on('installing', log('installing'));
  }

  // output dir
  program.out && duo.assets(program.out);

  if (program.use) {
    program.use.trim().split(",").forEach(function (plugin) {
      var mod = resolve(root, "node_modules", plugin.trim());
      duo.use(require(mod)());
    });
  }

  // events
  if (!quiet) {
    duo.on('install', log('installed'));
    duo.on('running', log('building'));
    duo.on('run', log('built'));
  }

  return duo;
}

/**
 * Log an event
 *
 * @param {String} event
 * @return {Function}
 */

function log (event) {
  return function(pkg) {
    pkg = pkg.slug ? pkg.slug() : pkg;
    pkg = 'source.js' == pkg ? 'from stdin' : pkg;
    logger[event](pkg);
  }
}

/**
 * Error
 */

function error(err) {
  err = 'string' == typeof err ? new Error(err) : err;
  logger.error(err.stack);
  logger.end();
}

/**
 * Object values
 *
 * @param {Object} obj
 * @return {Array}
 */

// function values(obj) {
//   return Object.keys(obj).map(function(k) { return obj[k]; });
// }

/**
 * Read JSON
 *
 * @param {String} path
 * @return {Object}
 * @api private
 */

// function json(path) {
//   try {
//     return require(path);
//   } catch(e) {
//     return {};
//   }
// };

/**
 * Find the root
 *
 * @param {String} root
 * @param {String}
 */

function findroot(root) {
  if (root) return resolve(cwd, root);
  var path = cwd;

  while (!exists(join(path, 'component.json')) && '/' != path) {
    path = dirname(path);
  }

  return '/' == path
    ? cwd
    : path;
}

/**
 * Parse args
 *
 * @param {Array} args
 * @return {Object}
 * @api private
 */

// function parse(args) {
//   var obj = {};
//   obj.entries = [];
//   obj.out = null;

//   switch(args.length) {
//     case 0:
//       return obj;
//     case 1:
//       obj.entries = args.slice(0);
//       return obj;
//     default:
//       obj.entries = args.slice(0, -1);
//       obj.out = args.slice(-1)[0];
//       obj.out = globs(obj.out) && obj.out;
//       return obj;
//   }
// }

/**
 * Resolve the root
 *
 * @param {String} path
 * @return {String}
 */

// function base(path) {
//   return path
//     ? resolve(cwd, path)
//     : cwd;
// }

/**
 * Filter out any globs
 */

// function globs(file) {
//   return !/\*/.test(file);
// }

/**
 * Simple hueristic to check
 * if `path` is a file
 *
 * @param {String} path
 * @return {Boolean}
 * @api private
 */

function isFile(path) {
  return path && !! ~path.indexOf('.');
}
